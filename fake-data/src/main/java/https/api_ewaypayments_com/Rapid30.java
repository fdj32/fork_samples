package https.api_ewaypayments_com;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * Rapid 3.0 allows you to use your own payment page, but transmits credit card data directly from the customer's browser to eWAY's gateway, bypassing your servers entirely. This provides enhanced security without impeding your freedom to customise the checkout process.
 *
 * This class was generated by Apache CXF 3.5.9
 * 2024-08-06T16:29:11.478+08:00
 * Generated source version: 3.5.9
 *
 */
@WebServiceClient(name = "Rapid3.0",
                  wsdlLocation = "file:soap.xml",
                  targetNamespace = "https://api.ewaypayments.com/")
public class Rapid30 extends Service {
	
	public static final String WSDL_FILENAME = "soap.xml";

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("https://api.ewaypayments.com/", "Rapid3.0");
    public static final QName Rapid30Soap12 = new QName("https://api.ewaypayments.com/", "Rapid3.0Soap12");
    public static final QName Rapid30Soap = new QName("https://api.ewaypayments.com/", "Rapid3.0Soap");
    static {
        URL url = Rapid30.class.getResource(WSDL_FILENAME);
        if (url == null) {
        	url = Thread.currentThread().getContextClassLoader().getResource(WSDL_FILENAME);
        }
        if (url == null) {
        	url = ClassLoader.getSystemResource(WSDL_FILENAME);
        }
        if (url == null) {
            java.util.logging.Logger.getLogger(Rapid30.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:soap.xml");
        }
        WSDL_LOCATION = url;
    }

    public Rapid30(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Rapid30(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Rapid30() {
        super(WSDL_LOCATION, SERVICE);
    }

    public Rapid30(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Rapid30(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Rapid30(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns Rapid30Soap
     */
    @WebEndpoint(name = "Rapid3.0Soap12")
    public Rapid30Soap getRapid30Soap12() {
        return super.getPort(Rapid30Soap12, Rapid30Soap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Rapid30Soap
     */
    @WebEndpoint(name = "Rapid3.0Soap12")
    public Rapid30Soap getRapid30Soap12(WebServiceFeature... features) {
        return super.getPort(Rapid30Soap12, Rapid30Soap.class, features);
    }


    /**
     *
     * @return
     *     returns Rapid30Soap
     */
    @WebEndpoint(name = "Rapid3.0Soap")
    public Rapid30Soap getRapid30Soap() {
        return super.getPort(Rapid30Soap, Rapid30Soap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Rapid30Soap
     */
    @WebEndpoint(name = "Rapid3.0Soap")
    public Rapid30Soap getRapid30Soap(WebServiceFeature... features) {
        return super.getPort(Rapid30Soap, Rapid30Soap.class, features);
    }

}
